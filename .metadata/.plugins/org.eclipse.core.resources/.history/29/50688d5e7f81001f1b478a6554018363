package baselibrary;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.events.EventFiringWebDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import applicationutility.ApplicationUtility;
import excelutility.ExcelUtility;
import okhttp3.internal.connection.RouteSelector.Selection;
import propertyutility.PropertyUtility;
import screenshotutility.ScreenShotsUtility;

public class Baselibrary implements ExcelUtility, PropertyUtility, ApplicationUtility,ScreenShotsUtility {
	public static WebDriver driver = null;

	public void geturl(String browser)
	// public static void main(String[]args)
	{
		if (browser.equals("chrome")) {
			String path = "E:\\java automation\\MyFirstJavaProgram\\seleniumproject\\src\\test\\java\\Day17\\Framework\\webdriver\\chromedriver.exe";
			System.setProperty("webdriver.chrome.driver", path);
			driver = new ChromeDriver();
		}
		else if(browser.equals("firefox")) {
			String path = "E:\\java automation\\MyFirstJavaProgram\\seleniumproject\\src\\test\\java\\Day17\\Framework\\webdriver\\chromedriver.exe";
			System.setProperty("webdriver.firefox.driver", path);
			driver = new FirefoxDriver();
		}
		else if(browser.equals("edge")) {
			String path = "E:\\java automation\\MyFirstJavaProgram\\seleniumproject\\src\\test\\java\\Day17\\Framework\\webdriver\\chromedriver.exe";
			System.setProperty("webdriver.edge.driver", path);
			driver = new EdgeDriver();
		}
		
		driver.get("https://www.testingbaba.com/old/");
		driver.manage().window().maximize();
	}

	@Override
	public String getReadData(int sheet, int row, int col) {
		String path = "E:\\java automation\\MyFirstJavaProgram\\seleniumproject\\src\\test\\java\\Day17\\Framework\\DataTest\\New Microsoft Excel Worksheet.xlsx";
		String val = "";
		try {
			FileInputStream fis = new FileInputStream(path);
			XSSFWorkbook wb = new XSSFWorkbook(fis);
			XSSFSheet sht = wb.getSheetAt(sheet);
			val = sht.getRow(row).getCell(col).getStringCellValue();
		} catch (Exception e) {
			System.out.println("issues in getReadData :   " + e);
		}

		return val;
	}

	@Override
	public String getReadData(String key) {
		String val = "";
		try {

			String path = "E:\\java automation\\MyFirstJavaProgram\\seleniumproject\\src\\test\\java\\Day17\\Framework\\DataTest\\config.properties";
			FileInputStream fis = new FileInputStream(path);
			Properties prop = new Properties();
			prop.load(fis);
			val = prop.getProperty(key);
		} catch (Exception e) {
			System.out.println("issues in getReadData :   " + e);
		}
		return val;
	}

	@Override
	public void doubleclickme(WebElement ele) {
		Actions act = new Actions(driver);
		act.doubleClick(ele).perform();

	}

	@Override
	public void rightclickme(WebElement ele) {
		Actions act = new Actions(driver);
		act.contextClick(ele).perform();

	}

	@Override
	public void clickme(WebElement ele) {
		Actions act = new Actions(driver);
		act.click(ele).perform();

	}

	@Override
	public void waitforClick(WebElement ele) {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		wait.until(ExpectedConditions.elementToBeClickable(ele));

	}

	@Override
	public void waitforVisibile(WebElement ele) {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		wait.until(ExpectedConditions.elementToBeClickable(ele));

	}

	@Override
	public void waitforalert() {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		wait.until(ExpectedConditions.alertIsPresent());

	}

	@Override
	public void selectbyvisibleText(WebElement ele, String text) {
		Select sel = new Select(ele);
		sel.selectByVisibleText(text);

	}

	@Override
	public void selectbyIndexing(WebElement ele, int index) {
		Select sel = new Select(ele);
		sel.selectByIndex(index);

	}

	@Override
	public void selectbyValue(WebElement ele, String val) {
		Select sel = new Select(ele);
		sel.selectByValue(val);

	}

	@Override
	public void uploadfile(String path) {
		try {
			StringSelection sel= new StringSelection(path);
			Clipboard clipboard= Toolkit.getDefaultToolkit().getSystemClipboard();
			clipboard.setContents(sel, null);
			
			Robot rob= new Robot();
			rob.keyPress(KeyEvent.VK_ENTER);
			rob.keyRelease(KeyEvent.VK_ENTER);
			Thread.sleep(1000);
			rob.keyPress(KeyEvent.VK_CONTROL);
			rob.keyPress(KeyEvent.VK_V);
			rob.keyRelease(KeyEvent.VK_V);
			rob.keyRelease(KeyEvent.VK_CONTROL);
			
			rob.keyPress(KeyEvent.VK_ENTER);
			Thread.sleep(1000);
			rob.keyRelease(KeyEvent.VK_ENTER);
			
			
			
		} catch (Exception e) {
			System.out.println("issues in upload:"+e);
		}
		
		
	}

	@Override
	public void ScreenShot(String folderName, String fileName) {
		String loc=System.getProperty("user.dir");
		String path=loc+"//"+folderName+"//"+fileName+"//"+".png";
		try {
			EventFiringWebDriver efw= new EventFiringWebDriver(driver);
			File src=	efw.getScreenshotAs(OutputType.FILE);
			File dec= new File(path);
			FileUtils.copyFile(src, dec);
		} catch (Exception e) {
			System.out.println("ISSUS IN screenshot:"+e);
		}
	
		
	}

}
